import { GameSet } from './GameSet';
import { Generation } from './Generation';
import { Intelligence } from './Intelligence';
import { Controller, PlayerClass } from './PlayerClass';
type Leader = {
    set: GameSet;
    player: PlayerClass;
};
export declare class EngineClass {
    sets: GameSet[][];
    setsCount: number;
    lookingForLeader: boolean;
    leader?: Leader;
    leftController: Controller;
    rightController: Controller;
    commonLeftPlayer?: PlayerClass;
    commonRightPlayer?: PlayerClass;
    generationsStat: Array<Generation | undefined>;
    population: number;
    config: {
        VISIBLE_SETS_COUNT: number;
        KEYBOARD_REPEAT_TIMEOUT: number;
        boardWidth: number;
        boardHeight: number;
        boardPadding: number;
        ballDiameter: number;
        paddleWidth: number;
        paddleHeight: number;
        maxBounceAngle: number;
        playerSpeed: number;
        ballSpeed: number;
        move: number;
        moveEnvStep: number;
        moveEnvFinal: number;
        bounce: number;
        bounceEnvStep: number;
        bounceEnvFinal: number;
        fail: number;
        failEnvStep: number;
        failEnvFinal: number;
        population: number;
        maxMutation: number;
        divisionThreshold: number;
        divisionScore: number;
        wallMinAngle: number;
        maxThreshold: number;
        maxBias: number;
        populationIncreaseMulti: number;
    };
    unsubscriber: () => void;
    hasAi: boolean;
    hasOnlyAi: boolean;
    hasEnv: boolean;
    hasEnvAi: boolean;
    watchIndividual?: Leader;
    watchGeneration?: number | false;
    constructor();
    destroy: () => void;
    setControllers: (leftController?: Controller, rightController?: Controller) => void;
    update: () => {
        sets: GameSet[];
        length: number;
    };
    createGeneration: (number: number) => Generation;
    getLastGenerationWithCount: () => number;
    createGenerationSibling: (parent?: Intelligence) => Intelligence;
    createSets: (parent?: Intelligence, count?: number) => void;
    createSet: (parent?: Intelligence, mutate?: boolean) => GameSet;
    killSet: (generation?: number, set?: GameSet) => void;
    clearSets: () => void;
    loadLeader: () => void;
    saveLeader: () => void;
    restart: () => void;
    watchLeaderToggle: () => void;
}
export {};
